<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   
			   minWidth="955" 
			   minHeight="600"
			   
			   initialize="onApplicationInitialize(event)"
			   applicationComplete="onApplicationComplete(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			
			import flash.system.Security;
			import org.denivip.osmf.plugins.HLSPluginInfo;
			
			import org.osmf.containers.MediaContainer;
			import org.osmf.elements.DurationElement;
			import org.osmf.events.AlternativeAudioEvent;
			import org.osmf.events.BufferEvent;
			import org.osmf.events.MediaErrorEvent;
			import org.osmf.events.MediaFactoryEvent;
			import org.osmf.events.MediaPlayerCapabilityChangeEvent;
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.events.TimeEvent;
			import org.osmf.events.LoadEvent;
			import org.osmf.events.BufferEvent;
			import org.osmf.events.PlayEvent;
			import org.osmf.events.HTTPStreamingEvent;
			import org.osmf.layout.HorizontalAlign;
			import org.osmf.layout.LayoutMetadata;
			import org.osmf.layout.LayoutMode;
			import org.osmf.layout.ScaleMode;
			import org.osmf.layout.VerticalAlign;
			import org.osmf.media.DefaultMediaFactory;
			import org.osmf.media.MediaElement;
			import org.osmf.media.MediaFactory;
			import org.osmf.media.MediaPlayer;
			import org.osmf.media.MediaPlayerState;
			import org.osmf.media.URLResource;
			import org.osmf.media.MediaResourceBase;
			import org.osmf.media.PluginInfoResource;
			
			import org.osmf.metadata.MetadataNamespaces;
			import org.osmf.metadata.Metadata;
			import org.osmf.net.DynamicStreamingItem;
			import org.osmf.net.StreamingItem;
			import org.osmf.net.StreamingURLResource;
			
			import org.osmf.utils.OSMFSettings;
			
			import org.osmf.net.NetStreamLoadTrait;
			import org.osmf.net.NetStreamAlternativeAudioTrait;
			import org.osmf.net.StreamingURLResource;
			import org.osmf.net.NetStreamBufferTrait;
			import org.osmf.net.NetStreamCodes;
			
			import org.osmf.traits.AlternativeAudioTrait;
			import org.osmf.traits.MediaTraitType;
			import org.osmf.traits.MediaTraitBase;
			import org.osmf.traits.LoadState;
			import org.osmf.traits.PlayState;
			
			import org.osmf.logging.Log;
			
			import flash.net.NetStream;
			import flash.events.NetStatusEvent;
			
			import spark.components.supportClasses.DropDownController;
			import spark.events.IndexChangeEvent;
			
			import flash.utils.Timer;
			import flash.events.TimerEvent;
			
			/**
			 * @private
			 * We just create the initial collection of resources.
			 */
			protected function onApplicationInitialize(event:FlexEvent):void
			{
				urls = new ArrayCollection(URLS);
			}
			
			private function onPluginLoaded(event:MediaFactoryEvent):void
			{
				trace("Plugin successed to load.");
			}

			private function onPluginLoadError(event:MediaFactoryEvent):void
			{
				trace("Plugin failed to load.");
				
			}
			
			/**
			 * @private
			 * We'll create all our application objects.
			 **/
			protected function onApplicationComplete(event:FlexEvent):void
			{
				Log.loggerFactory = new SimpleLoggerFactory(); 
				
				OSMFSettings.enableStageVideo = false;
				trace("* Maxium Retries: " + OSMFSettings.hdsMaximumRetries);
				//OSMFSettings.hdsMaximumRetries = 10;
				
				// factory
				factory = new DefaultMediaFactory();
				
				factory.addEventListener(MediaFactoryEvent.PLUGIN_LOAD, onPluginLoaded);
				factory.addEventListener(MediaFactoryEvent.PLUGIN_LOAD_ERROR, onPluginLoadError);
				//factory.loadPlugin(new URLResource("file:///F:/Streaming/osmf-hls-plugin/release/HLSDynamicPlugin.swf"));
				//factory.loadPlugin(new URLResource("file:///F:/Streaming/example_osmf_player/bin/AkamaiAdvancedStreamingPlugin.swf"));
				//factory.loadPlugin(new URLResource("file:///F:/Streaming/example_osmf_player/bin/HLSDynamicPlugin.swf"));
				factory.loadPlugin(new PluginInfoResource(new HLSPluginInfo()));
				
				// player
				player = new MediaPlayer();
				player.autoPlay = false;
				player.autoRewind = false;
				player.addEventListener(MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE, onPlayerStateChange);
				player.addEventListener(MediaPlayerCapabilityChangeEvent.CAN_PLAY_CHANGE, onPlayerCanPlayChange);
				player.addEventListener(TimeEvent.DURATION_CHANGE, onDurationChange);
				player.addEventListener(TimeEvent.CURRENT_TIME_CHANGE, onPlayerCurrentTimeChange);
				player.addEventListener(AlternativeAudioEvent.AUDIO_SWITCHING_CHANGE, onPlayerAudioStreamChange);
				player.addEventListener(MediaErrorEvent.MEDIA_ERROR, onPlayerError);
				player.addEventListener(LoadEvent.LOAD_STATE_CHANGE, onLoadStateChange);
				
				// container
				container = new MediaContainer();
				container.width = 690;
				container.height = 480;
				videoContainer.addChild(container);
				
				updateUI();
			}
			
			private static const HIGH_PRIORITY:int = int.MAX_VALUE;
			
			private function onLoadStateChange(e:LoadEvent):void
			{
				trace("OnLoadStateChange - " + e.loadState);
				
				if (e.loadState == LoadState.READY)
				{
					onPlayPauseClick(null);
					
					var nsLoadTrait:NetStreamLoadTrait = player.media.getTrait(MediaTraitType.LOAD) as NetStreamLoadTrait;
					stream = nsLoadTrait.netStream;
					trace("* add download error listener");
					stream.addEventListener(HTTPStreamingEvent.DOWNLOAD_ERROR, onDownloadError);
					stream.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus, false, HIGH_PRIORITY, true);
					stream.addEventListener(IOErrorEvent.IO_ERROR, onError, false, HIGH_PRIORITY, true);
					trace( "NetStream Type: " + flash.utils.getQualifiedClassName( stream ) );
					
					//stream.receiveVideo(false);
				}
			}
			
			private function onError(event:IOErrorEvent):void
			{
				trace("*** ERROR!!! ***");
			}
			
			private function onNetStatus(event:NetStatusEvent):void
			{
				var currentTime:Date = new Date();
				trace("NetStatus event:" + event.info.code + "[" + currentTime + "]");
			}
			
			private function onDownloadError(event:HTTPStreamingEvent):void
			{
				var currentTime:Date = new Date();
				trace("Terminated ... " + "[" + currentTime + "]");
				
				unloadResource();
				var selectedUrl:String = listResources.selectedItem["data"];
				createResource(selectedUrl);
			}
			
			/**
			 * @private
			 * When resources combo box selected index changes, we stop the playback of the current resource
			 * and switch to the new media.
			 **/
			protected function onResourceSelectionChange(event:IndexChangeEvent):void
			{
				var dropDown:DropDownList = event.target as DropDownList;
				if (dropDown != null)
				{
					var selectedIndex:int = dropDown.selectedIndex;
					var selectedUrl:String = null;
					if (dropDown.selectedItem != null && dropDown.selectedItem.hasOwnProperty("data"))
						selectedUrl = dropDown.selectedItem["data"];
					
					trace("[LBA - Sample] Selected index :", selectedIndex);
					trace("[LBA - Sample] Selected url   :", selectedUrl);
					
					unloadResource();
					if (selectedUrl != null)
						createResource(selectedUrl);
				}
			}
			
			/**
			 * @private
			 **/
			protected function onLanguageSelectionChange(event:IndexChangeEvent):void
			{
				var dropDown:DropDownList = event.target as DropDownList;
				if (dropDown != null)
				{
					var selectedItem:Object = dropDown.selectedItem;
					if (selectedItem != null)
					{
						alternativeLanguage = selectedItem.data;
						trace("[LBA - Sample] Selected language index :", alternativeLanguage);
						trace("[LBA - Sample] Selected language :", dropDown.selectedItem["label"]);
						
						if (player.hasAlternativeAudio)
						{
							player.switchAlternativeAudioIndex(alternativeLanguage);
						}
					}
				}
			}
			
			protected function onStreamSelectionChange(event:IndexChangeEvent):void
			{
				var dropDown:DropDownList = event.target as DropDownList;
				if (dropDown != null)
				{
					if (player.isDynamicStream)
					{
						var selectedIndex:int = dropDown.selectedIndex;
						trace("[LBA - Sample] Changing bitrate index to ", selectedIndex);
						player.switchDynamicStreamIndex(selectedIndex);
					}
				}				
			}			
			
			/**
			 * @private
			 * Clears existing resource.
			 **/			
			private function unloadResource():void
			{
				if (player.canPlay && player.state == MediaPlayerState.PLAYING)
					player.stop();
				
				player.media = null;
			}
			
			/**
			 * @private
			 * Create a resource from the specified url.
			 **/
			private function createResource(url:String):void
			{
				var res:URLResource = new URLResource(url);
				var element:MediaElement = factory.createMediaElement(res);
				
				var elementLayout:LayoutMetadata = new LayoutMetadata();
				elementLayout.percentHeight = 100;
				elementLayout.percentWidth = 100;
				elementLayout.scaleMode = ScaleMode.LETTERBOX;
				elementLayout.layoutMode = LayoutMode.NONE;
				elementLayout.verticalAlign = VerticalAlign.MIDDLE;
				elementLayout.horizontalAlign = HorizontalAlign.CENTER;
				element.addMetadata(LayoutMetadata.LAYOUT_NAMESPACE, elementLayout);
				
				container.addMediaElement(element);
				
				player.media = element;
			}
			
			/**
			 * @private
			 * Updates UI elements to reflect the player states.
			 **/
			private function updateUI():void
			{
				btnPlayPause.enabled = player.canPlay;
				listLanguages.enabled = (player.state != MediaPlayerState.PLAYBACK_ERROR && player.state != MediaPlayerState.UNINITIALIZED && player.hasAlternativeAudio);
				chkAutoRewind.selected = player.autoRewind;
				chkAutoRewind.enabled = (player.state != MediaPlayerState.PLAYBACK_ERROR && player.state != MediaPlayerState.UNINITIALIZED);
			}
			
			/**
			 * @private
			 * Updates ui element to reflect the new duration.
			 **/
			private function onDurationChange(event:TimeEvent):void
			{
				if (player.temporal)
				{
					sldSeek.maximum = player.duration;
					sldSeek.minimum = 0;
				}
			}
			
			/**
			 * @private
			 * Track when the player is capable to play in order to enable UI.
			 */
			private function onPlayerCanPlayChange(event:MediaPlayerCapabilityChangeEvent):void
			{
				updateUI();
			}
			
			/**
			 * @private
			 * Called when the player current time has changed. We update the slider position.
			 **/
			private function onPlayerCurrentTimeChange(event:TimeEvent):void
			{
				if (event.time >= sldSeek.minimum && event.time <= sldSeek.maximum) 
				{
					sldSeek.value = event.time;
					lblTime.text = Number(event.time).toFixed(3);
					
					
					if (stream != null)
					{
						if (player.state != MediaPlayerState.BUFFERING)
							stream.bufferTime = player.bufferTime;
						else
							stream.bufferTime = 2;
					}
				}
			}
			
			/**
			 * @private
			 * When the player is ready for playback, iterate through alternate
			 * audio tracks and update the UI.
			 **/
			private function onPlayerStateChange(event:MediaPlayerStateChangeEvent):void
			{
				updateUI();
				var targetPlayer:MediaPlayer = event.target as MediaPlayer;
				if (targetPlayer != null && event.state == MediaPlayerState.READY)
				{
					languages = new ArrayCollection();
					alternativeLanguage = -1;
					
					var index:int = 0;
					if (targetPlayer.hasAlternativeAudio)
					{
						trace("[LBA - Sample] Alternative audio tracks available.");
						
						var languageItem:Object = new Object();
						languageItem["label"] = "Default";
						languageItem["data"] = -1;
						languages.addItem(languageItem); 
						
						for (index = 0; index < targetPlayer.numAlternativeAudioStreams; index++)
						{
							var item:StreamingItem = targetPlayer.getAlternativeAudioItemAt(index);
							trace("[LBA - Sample] ", item.info.language, "]", item.info.label);
							
							languageItem = new Object();
							languageItem["label"] = item.info.label + "(" + item.info.language + ")";
							languageItem["data"] = index;
							languages.addItem(languageItem); 
						}
					}
					
					streams = new ArrayCollection();
					
					if (targetPlayer.isDynamicStream)
					{
						trace("[LBA - Sample] Dynamic streams available.");
						for (index = 0; index < targetPlayer.numDynamicStreams; index++)
						{
							var bitrate:Number = targetPlayer.getBitrateForDynamicStreamIndex(index);
							trace("[LBA - Sample] Bitrate :", bitrate);
							
							var bitRateItem:Object = new Object();
							bitRateItem["data"] = bitRateItem["label"] = bitrate;
							streams.addItem(bitrate);
						}
					}
				}
			}
			
			/**
			 * @private
			 * Executed when player encounters an error.
			 **/
			private function onPlayerError(event:MediaErrorEvent):void
			{
				updateUI();
			}
			
			/**
			 * @private 
			 * Play the current media element.
			 **/
			private function onPlayPauseClick(event:MouseEvent):void
			{
				if (!player.playing)
				{
					if (player.canPlay)
						player.play();
				}
				else
				{
					if (player.canPause)
						player.pause();
				}
			}
			
			/**
			 * @private 
			 * Snap the current media element to live.
			 **/
			private function onSnapToLiveClick(event:MouseEvent):void
			{
				if (player != null && player.state == MediaPlayerState.PLAYING)
				{
					if (player.canSeek)
					{
						player.seek(10000);
					}
				}
			}

			private function onSeekRequest():void
			{
				var seekTarget:Number = sldSeek.value;	
				if (player.canSeek)
					player.seek(seekTarget);
			}
			
			private function onAutoRewindChange(event:Event):void
			{
				player.autoRewind = chkAutoRewind.selected;
			}
			
			private function onAutoSwitchChange(event:Event):void
			{
				player.autoDynamicStreamSwitch = chkAutoSwitch.selected;
			}
			
			/**
			 * @private
			 * Listen for audio stream events.
			 **/
			private function onPlayerAudioStreamChange(event:AlternativeAudioEvent):void
			{
				if (event.switching)
					trace("[LBA - Sample] Alternative audio stream is switching.");
				else
					trace("[LBA - Sample] Alternative audio switch is complete.");
			}
			
			/**
			 * Returns the highest level Resource of a Specific type by traversing the proxiedElement parent chain.
			 */ 		
			public static function getResourceFromParentOfType(media:MediaElement, type:Class):MediaResourceBase
			{
				// If the current element is a proxy element, go up
				var result:MediaResourceBase = null;
				if (media.hasOwnProperty("proxiedElement") && (media["proxiedElement"] != null))
				{
					result = getResourceFromParentOfType(media["proxiedElement"], type);
				}			
				
				// If we didn't get any result from a higher level proxy
				// and the current media is of the needed type, return it.
				if (result == null && media.resource is type)
				{
					result = media.resource;
				}
				
				return result;
			}
			
			public static function getStreamType1(media:MediaElement):String
			{
				if (media == null)
				{
					return null;
				}
				
				var streamingURLResource:StreamingURLResource = getResourceFromParentOfType(media, StreamingURLResource) as StreamingURLResource;
				
				trace( "---> " + flash.utils.getQualifiedClassName( streamingURLResource ) );
				
				if (streamingURLResource != null)
				{
					return streamingURLResource.streamType;						
				}
				return null;			
			}
			
			public function getStreamType():String
			{
				return getStreamType1(player.media);
			}
			
			//trace( "---> " + getStreamType() );
			//trace( "---> " + flash.utils.getQualifiedClassName( element ) );
			
			private function onCheckClick(event:MouseEvent):void
			{
				trace("----------");
				trace("* BufferTime: " + player.bufferTime);
				trace("* bufferLength: " + player.bufferLength);
				//trace("* NS BufferTime: " + stream.bufferTime);
				//trace("* NS bufferLength: " + stream.bufferLength);
				//trace("* Current State? " + player.state + ", " + listResources.selectedItem["data"]);
				trace("* StreamType: " + getStreamType());
				
				//stream.maxPauseBufferTime = 1000;
				//b.bufferTime = 350;
				
				/*
				var d:MediaTraitBase = player.media.getTrait("dynamicStream");
				trace( "dynamicStream TraitType: " + flash.utils.getQualifiedClassName( d ) );
				
				var l:MediaTraitBase = player.media.getTrait("load");
				trace( "load TraitType: " + flash.utils.getQualifiedClassName( l ) );
				*/
			}
			
			private function onSetupClick(event:MouseEvent):void
			{
				var element:MediaElement = player.media;
				for (var i:uint; i < element.traitTypes.length; i++) {
					trace(element.traitTypes[i]);
				}
				
				var d:MediaTraitBase = player.media.getTrait("displayObject");
				trace( "displayObject TraitType: " + flash.utils.getQualifiedClassName( d ) );
			}
			
			/**
			 * @private
			 **/
			private var player:MediaPlayer = null;
			private var factory:MediaFactory = null;
			private var container:MediaContainer = null;
			private var stream:NetStream = null;
			
			private var alternativeLanguage:int = -1;
			private var dynamicStream:int = -1;
			
			private var seekedToLive:Boolean = false;
			
			[Bindable]
			protected var streams:ArrayCollection = null;
			
			[Bindable]
			protected var languages:ArrayCollection = null;
			
			[Bindable]
			protected var urls:ArrayCollection = null;
			private static const URLS:Array = 
				[
					
				];

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout 
					paddingTop="20"
					horizontalAlign="center" />
		</s:layout>
		
		<s:Panel title="Late-binding audio on HDS sample" >
			<s:layout>
				<s:VerticalLayout 
					gap="5" 
					paddingTop="10" paddingLeft="10" paddingBottom="10" paddingRight="10"
					horizontalAlign="left"
					/>
			</s:layout>
			
			<s:HGroup verticalAlign="middle" height="20" width="100%"  >
				<s:Label text="Please select the desired resource :" />
				<s:DropDownList id="listResources" width="500" dataProvider="{urls}" change="onResourceSelectionChange(event)"/>
			</s:HGroup>
			
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0x999999"  caps="square" weight="2"/>
				</s:stroke>
			</s:Line>
			
			<s:BorderContainer width="100%" minWidth="640" minHeight="480" backgroundColor="0x000000">
				<s:SpriteVisualElement id="videoContainer" />
			</s:BorderContainer>

			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0x999999"  caps="square" weight="2"/>
				</s:stroke>
			</s:Line>

			<s:Group id="videoMenu" width="100%">
				<s:layout>
					<s:HorizontalLayout 
							gap="5"
							verticalAlign="middle" 
							horizontalAlign="left"
							/>
				</s:layout>
				<s:Button id="btnPlayPause" label="Play" click="onPlayPauseClick(event)" />
				<s:HSlider id="sldSeek" snapInterval="1" width="300" change="onSeekRequest()" />
				<s:Button id="btnCheck" label="Check" click="onCheckClick(event)" />
				<s:Button id="btnSetup" label="Setup" click="onSetupClick(event)" />
				<s:Label id="lblTime" width="100" />
				<s:Spacer width="100%" />
				<s:VGroup>
					<s:DropDownList id="listStreams" width="200" dataProvider="{streams}" change="onStreamSelectionChange(event)"/>
					<s:DropDownList id="listLanguages" width="200" dataProvider="{languages}" change="onLanguageSelectionChange(event)"/>
				</s:VGroup>
			</s:Group>
			<s:Group>
				<s:layout>
					<s:VerticalLayout
							gap="5" 
							verticalAlign="middle" 
							horizontalAlign="left"
						/>
				</s:layout>
				<s:CheckBox id="chkAutoRewind" label="autoRewind" change="onAutoRewindChange(event)" />
				<s:CheckBox id="chkAutoSwitch" label="autoSwitch" change="onAutoSwitchChange(event)" />
			</s:Group>
		</s:Panel>
	</s:Group>
</s:Application>
